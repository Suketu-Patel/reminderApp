{"version":3,"sources":["utils/dateFormatter.js","components/ReminderForm.js","components/ReminderFooter.js","components/ReminderList.js","components/ReminderEdit.js","components/ReminderHeader.js","components/App.js","index.js"],"names":["dateFormat","fullDate","choice","toString","split","dateMap","day","month","date","year","time","timezone","standard","choiceArray","result","i","push","join","ReminderForm","store","useContext","StoreContext","useState","reminder","setReminder","Date","setDate","onSubmit","e","preventDefault","addReminder","title","dateCreated","expirationDate","type","value","className","onChange","target","required","placeholder","newDate","ReminderFooter","count","useObserver","reminderCount","style","position","bottom","left","RemidnerList","reminderList","reminders","map","id","key","to","withRouter","props","reminderId","useParams","onEditChange","deleteReminder","splice","history","onClick","ReminderHeader","App","height","path","exact","React","createContext","Notification","requestPermission","status","console","log","navigator","serviceWorker","register","then","registration","catch","err","ReactDOM","render","basename","process","children","useLocalStore","length","editReminder","prompt","Provider","permission","getRegistration","reg","showNotification","document","querySelector"],"mappings":"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","file":"static/js/main.7159e381.chunk.js","sourcesContent":["export const dateFormat = (fullDate, choice) => {\n    const [day, month, date, year, time, timezone, ...standard] = fullDate.toString().split(\" \");\n    const dateMap = {\n        day, month, date, year, time, timezone, standard\n    }\n    let choiceArray = choice.split(\" \");\n    let result = []\n    for(let i in choiceArray){\n        result.push(dateMap[choiceArray[i]])\n    }\n    return result.join(\" \")\n}","import React, { useContext, useState } from 'react';\nimport { StoreContext } from '../index'\nimport DateTimePicker from 'react-datetime-picker';\nimport {dateFormat} from \"../utils/dateFormatter\"\n\nconst ReminderForm = () => {\n    const store = useContext(StoreContext);\n    const [reminder,setReminder] = useState(\"\")\n    const [date,setDate] = useState(new Date())\n\n    const addReminder = e =>{\n        e.preventDefault();\n        store.addReminder(\n            {title:reminder,dateCreated:new Date(),expirationDate:dateFormat(date,\"date month time\")}\n        )\n        setReminder(\"\")\n    }\n\n    const changeHandler = e =>{\n        setReminder(e.target.value);\n    }\n\n    const changeDate = (newDate) => {\n        setDate(newDate)\n    }\n    return(\n        <form onSubmit={addReminder}>\n            <input type=\"text\" \n                value={reminder} \n                className = \"form-control mb-3 mt-3\"\n                onChange={changeHandler}\n                required\n                placeholder=\"Press 'Enter' To add Reminder\"\n            />\n            <label className=\"mr-3\">Reminder Time:</label>\n            <DateTimePicker\n                onChange={changeDate}\n                value={date}\n            />\n            <br/>\n            <input \n                className=\"mt-3 mb-5 btn btn-primary form-control\"\n                type=\"submit\"\n            />\n        </form>\n    )\n}\nexport default ReminderForm;","import React, { useContext } from \"react\"\nimport { StoreContext } from '../index'\nimport { useObserver } from \"mobx-react\";\n\nconst ReminderFooter = () => {\n    const store = useContext(StoreContext);\n    const count = useObserver(()=>store.reminderCount)\n    return(\n        <div className=\"list-group-item active w-100\" \n        style={{position:\"fixed\",bottom:0,left:0}}>\n            <h4>Number of reminders: {count}</h4>\n        </div>\n    )\n}\nexport default ReminderFooter;","import React, { useContext } from 'react';\nimport { StoreContext } from '..';\nimport { useObserver } from 'mobx-react'\nimport { Link } from 'react-router-dom';\nimport {dateFormat} from \"../utils/dateFormatter\"\nconst RemidnerList = () => {\n\n    const store = useContext(StoreContext)\n    const reminderList = useObserver(() =>\n        store.reminders.map((reminder, id) => {\n            return (\n                <div key={id} className=\"list-group\">\n                    <Link to={`/edit/${id}`} \n                        className=\"list-group-item list-group-item-action flex-column align-items-start\">\n                        <div className=\"d-flex w-100 justify-content-between\">\n                            <h5 className=\"mb-1\">{reminder.title}</h5>\n                            <small>{dateFormat(reminder.dateCreated,\"day date\")}</small>\n                            <small>Expiration-{reminder.expirationDate}</small>\n                        </div>\n                    </Link>\n                </div>\n            )\n        })\n    )\n    return (\n        <div>\n            {reminderList}\n        </div>\n    )\n}\n\nexport default RemidnerList;\n","import React, { useContext } from 'react';\nimport { useParams, withRouter } from 'react-router-dom';\nimport { StoreContext } from '..';\nimport { useObserver } from 'mobx-react';\n\nconst ReminderEdit = (props) => {\n    let { reminderId } = useParams();\n    const store = useContext(StoreContext)\n\n    const onEditChange = (e) => {\n        store.reminders[reminderId].title = e.target.value;\n    }\n\n    const deleteReminder = () => {\n        store.reminders.splice(reminderId, 1)\n        props.history.push(\"/\")\n    }\n\n    return (\n        <div>\n            {\n                useObserver(() => {\n                    return (\n                        <div className=\"container\">\n                            <form onSubmit={(e) => {\n                                e.preventDefault();\n                                return props.history.push(\"/\")\n                            }\n                            }>\n                                <div className=\"form-group mt-3\">\n                                    <h3>Edit reminder</h3>\n                                    <label>Title</label>\n                                    <input\n                                        type=\"text\"\n                                        className=\"form-control\"\n                                        value={store.reminders[reminderId].title}\n                                        onChange={onEditChange}\n                                        required\n                                    />\n                                    <input\n                                        className=\"mt-2 btn btn-primary form-control\"\n                                        type=\"submit\"\n                                        value=\"Done\"\n                                    />\n                                </div>\n                            </form>\n                            <button\n                                className=\"btn btn-danger form-control\"\n                                onClick={deleteReminder}\n                            >\n                                Delete\n                            </button>\n                        </div>\n                    )\n                })\n            }\n\n        </div>\n    )\n}\nexport default withRouter(ReminderEdit);","import React from 'react';\nimport { NavLink } from 'react-router-dom';\n\n\nconst ReminderHeader = () => {\n    return (\n        <nav className=\"navbar navbar-dark bg-primary\">\n            <NavLink to={\"/\"} className=\"navbar-brand\">Location Reminder</NavLink>\n        </nav>\n    )\n}\nexport default ReminderHeader;","import React from 'react';\nimport ReminderForm from './ReminderForm';\nimport ReminderFooter from './ReminderFooter';\nimport RemidnerList from './ReminderList';\nimport { Switch, Route } from 'react-router-dom';\nimport ReminderEdit from './ReminderEdit';\nimport ReminderHeader from './ReminderHeader';\n\nconst App = () => {\n    return (\n        <div style={{height:100+\"%\"}} >\n            <Switch>\n                <Route path=\"/\" exact>\n                    <ReminderHeader />\n                    <div className=\"h-100 container\">\n                        <ReminderForm />\n                        <RemidnerList />\n                        <ReminderFooter />\n                    </div>\n\n                </Route>\n                <Route path=\"/edit/:reminderId\">\n                    <ReminderHeader />\n                    <ReminderEdit />\n                    <ReminderFooter />\n                </Route>\n            </Switch>\n\n        </div>\n    );\n}\n\nexport default App;","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './components/App'\nimport { useLocalStore } from 'mobx-react';\nimport { BrowserRouter as Router } from 'react-router-dom'\nimport { dateFormat } from './utils/dateFormatter';\n\nexport const StoreContext = React.createContext();\nNotification.requestPermission(function (status) {\n    console.log('Notification permission status:', status);\n});\n\nif ('serviceWorker' in navigator) {\n    navigator.serviceWorker\n      .register('sw.js')\n        .then(function (registration) {\n            //do whatever you want with this..\n     })\n       .catch(function (err) {\n         console.log(\"Service Worker Failed to Register\", err);\n      }) \n}\n\nconst displayNotification = () => {\n    if (Notification.permission === 'granted') {\n        navigator.serviceWorker.getRegistration().then((reg) => {\n            \n            reg.showNotification('Hello world!');\n        });\n    }\n}\n\n\nconst StoreProvider = ({ children }) => {\n    const store = useLocalStore(() => ({\n        reminders: [\n            {\n                title: \"Buy Groceries\",\n                dateCreated: new Date(),\n                expirationDate: dateFormat(new Date(), \"date month time\")\n            }\n        ],\n        addReminder: reminder => {\n            store.reminders.push(reminder);\n        },\n        get reminderCount() {\n            return store.reminders.length\n        },\n        editReminder: (id) => {\n            store.reminders[id].title = prompt(\"type to edit\")\n        },\n    }));\n    return <StoreContext.Provider value={store}> {children} </StoreContext.Provider>\n}\n\nReactDOM.render(\n    <Router basename={`${process.env.PUBLIC_URL}/`}>\n        <StoreProvider>\n            <App />\n            <button onClick={displayNotification} className=\"btn btn-primary\">Show Notification</button>\n        </StoreProvider>\n    </Router>\n    ,\n    document.querySelector(\"#root\")\n);"],"sourceRoot":""}